/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var refs_types_pb = require('../refs/types_pb.js');
goog.exportSymbol('proto.neo.fs.v2.audit.DataAuditResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.audit.DataAuditResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.audit.DataAuditResult.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.audit.DataAuditResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.audit.DataAuditResult.displayName = 'proto.neo.fs.v2.audit.DataAuditResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.audit.DataAuditResult.repeatedFields_ = [8,9,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.audit.DataAuditResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.audit.DataAuditResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.audit.DataAuditResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    auditEpoch: msg.getAuditEpoch(),
    containerId: (f = msg.getContainerId()) && refs_types_pb.ContainerID.toObject(includeInstance, f),
    publicKey: msg.getPublicKey_asB64(),
    complete: msg.getComplete(),
    requests: msg.getRequests(),
    retries: msg.getRetries(),
    passSgList: jspb.Message.toObjectList(msg.getPassSgList(),
    refs_types_pb.ObjectID.toObject, includeInstance),
    failSgList: jspb.Message.toObjectList(msg.getFailSgList(),
    refs_types_pb.ObjectID.toObject, includeInstance),
    hit: msg.getHit(),
    miss: msg.getMiss(),
    fail: msg.getFail(),
    passNodesList: msg.getPassNodesList_asB64(),
    failNodesList: msg.getFailNodesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.audit.DataAuditResult}
 */
proto.neo.fs.v2.audit.DataAuditResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.audit.DataAuditResult;
  return proto.neo.fs.v2.audit.DataAuditResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.audit.DataAuditResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.audit.DataAuditResult}
 */
proto.neo.fs.v2.audit.DataAuditResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setAuditEpoch(value);
      break;
    case 3:
      var value = new refs_types_pb.ContainerID;
      reader.readMessage(value,refs_types_pb.ContainerID.deserializeBinaryFromReader);
      msg.setContainerId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setComplete(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequests(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRetries(value);
      break;
    case 8:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.getPassSgList().push(value);
      msg.setPassSgList(msg.getPassSgList());
      break;
    case 9:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.getFailSgList().push(value);
      msg.setFailSgList(msg.getFailSgList());
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHit(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMiss(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFail(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getPassNodesList().push(value);
      msg.setPassNodesList(msg.getPassNodesList());
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getFailNodesList().push(value);
      msg.setFailNodesList(msg.getFailNodesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.audit.DataAuditResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.audit.DataAuditResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = this.getAuditEpoch();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = this.getContainerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.ContainerID.serializeBinaryToWriter
    );
  }
  f = this.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getComplete();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getRequests();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getRetries();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getPassSgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getFailSgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getHit();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getMiss();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = this.getFail();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = this.getPassNodesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      13,
      f
    );
  }
  f = this.getFailNodesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.audit.DataAuditResult} The clone.
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.audit.DataAuditResult} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getVersion = function() {
  return /** @type{proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {proto.neo.fs.v2.refs.Version|undefined} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional fixed64 audit_epoch = 2;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getAuditEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setAuditEpoch = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional neo.fs.v2.refs.ContainerID container_id = 3;
 * @return {proto.neo.fs.v2.refs.ContainerID}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getContainerId = function() {
  return /** @type{proto.neo.fs.v2.refs.ContainerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ContainerID, 3));
};


/** @param {proto.neo.fs.v2.refs.ContainerID|undefined} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setContainerId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearContainerId = function() {
  this.setContainerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.hasContainerId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes public_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes public_key = 4;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setPublicKey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool complete = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setComplete = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 requests = 6;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getRequests = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setRequests = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 retries = 7;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getRetries = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setRetries = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated neo.fs.v2.refs.ObjectID pass_sg = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.neo.fs.v2.refs.ObjectID>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPassSgList = function() {
  return /** @type{!Array.<!proto.neo.fs.v2.refs.ObjectID>} */ (
    jspb.Message.getRepeatedWrapperField(this, refs_types_pb.ObjectID, 8));
};


/** @param {Array.<!proto.neo.fs.v2.refs.ObjectID>} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setPassSgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearPassSgList = function() {
  this.setPassSgList([]);
};


/**
 * repeated neo.fs.v2.refs.ObjectID fail_sg = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.neo.fs.v2.refs.ObjectID>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getFailSgList = function() {
  return /** @type{!Array.<!proto.neo.fs.v2.refs.ObjectID>} */ (
    jspb.Message.getRepeatedWrapperField(this, refs_types_pb.ObjectID, 9));
};


/** @param {Array.<!proto.neo.fs.v2.refs.ObjectID>} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setFailSgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearFailSgList = function() {
  this.setFailSgList([]);
};


/**
 * optional uint32 hit = 10;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getHit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setHit = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 miss = 11;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getMiss = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setMiss = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint32 fail = 12;
 * @return {number}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getFail = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setFail = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * repeated bytes pass_nodes = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPassNodesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 13));
};


/**
 * repeated bytes pass_nodes = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getPassNodesList()`
 * @return {!Array.<string>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPassNodesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getPassNodesList()));
};


/**
 * repeated bytes pass_nodes = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassNodesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getPassNodesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPassNodesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setPassNodesList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearPassNodesList = function() {
  jspb.Message.setField(this, 13, []);
};


/**
 * repeated bytes fail_nodes = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getFailNodesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 14));
};


/**
 * repeated bytes fail_nodes = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getFailNodesList()`
 * @return {!Array.<string>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getFailNodesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getFailNodesList()));
};


/**
 * repeated bytes fail_nodes = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFailNodesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.neo.fs.v2.audit.DataAuditResult.prototype.getFailNodesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getFailNodesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.neo.fs.v2.audit.DataAuditResult.prototype.setFailNodesList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


proto.neo.fs.v2.audit.DataAuditResult.prototype.clearFailNodesList = function() {
  jspb.Message.setField(this, 14, []);
};


goog.object.extend(exports, proto.neo.fs.v2.audit);
