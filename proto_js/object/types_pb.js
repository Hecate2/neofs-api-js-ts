/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var refs_types_pb = require('../refs/types_pb.js');
var session_types_pb = require('../session/types_pb.js');
goog.exportSymbol('proto.neo.fs.v2.object.Header', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.Header.Attribute', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.Header.Split', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.MatchType', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.Object', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.ObjectType', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.ShortHeader', null, global);
goog.exportSymbol('proto.neo.fs.v2.object.SplitInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.ShortHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.object.ShortHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.ShortHeader.displayName = 'proto.neo.fs.v2.object.ShortHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.ShortHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.ShortHeader} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.ShortHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    creationEpoch: msg.getCreationEpoch(),
    ownerId: (f = msg.getOwnerId()) && refs_types_pb.OwnerID.toObject(includeInstance, f),
    objectType: msg.getObjectType(),
    payloadLength: msg.getPayloadLength(),
    payloadHash: (f = msg.getPayloadHash()) && refs_types_pb.Checksum.toObject(includeInstance, f),
    homomorphicHash: (f = msg.getHomomorphicHash()) && refs_types_pb.Checksum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.ShortHeader}
 */
proto.neo.fs.v2.object.ShortHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.ShortHeader;
  return proto.neo.fs.v2.object.ShortHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.ShortHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.ShortHeader}
 */
proto.neo.fs.v2.object.ShortHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreationEpoch(value);
      break;
    case 3:
      var value = new refs_types_pb.OwnerID;
      reader.readMessage(value,refs_types_pb.OwnerID.deserializeBinaryFromReader);
      msg.setOwnerId(value);
      break;
    case 4:
      var value = /** @type {!proto.neo.fs.v2.object.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayloadLength(value);
      break;
    case 6:
      var value = new refs_types_pb.Checksum;
      reader.readMessage(value,refs_types_pb.Checksum.deserializeBinaryFromReader);
      msg.setPayloadHash(value);
      break;
    case 7:
      var value = new refs_types_pb.Checksum;
      reader.readMessage(value,refs_types_pb.Checksum.deserializeBinaryFromReader);
      msg.setHomomorphicHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.ShortHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.ShortHeader.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.ShortHeader.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = this.getCreationEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getOwnerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.OwnerID.serializeBinaryToWriter
    );
  }
  f = this.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getPayloadLength();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getPayloadHash();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      refs_types_pb.Checksum.serializeBinaryToWriter
    );
  }
  f = this.getHomomorphicHash();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      refs_types_pb.Checksum.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.ShortHeader} The clone.
 */
proto.neo.fs.v2.object.ShortHeader.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.ShortHeader} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getVersion = function() {
  return /** @type{proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {proto.neo.fs.v2.refs.Version|undefined} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.neo.fs.v2.object.ShortHeader.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 creation_epoch = 2;
 * @return {number}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getCreationEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setCreationEpoch = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional neo.fs.v2.refs.OwnerID owner_id = 3;
 * @return {proto.neo.fs.v2.refs.OwnerID}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getOwnerId = function() {
  return /** @type{proto.neo.fs.v2.refs.OwnerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.OwnerID, 3));
};


/** @param {proto.neo.fs.v2.refs.OwnerID|undefined} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setOwnerId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.object.ShortHeader.prototype.clearOwnerId = function() {
  this.setOwnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ObjectType object_type = 4;
 * @return {!proto.neo.fs.v2.object.ObjectType}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getObjectType = function() {
  return /** @type {!proto.neo.fs.v2.object.ObjectType} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {!proto.neo.fs.v2.object.ObjectType} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setObjectType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 payload_length = 5;
 * @return {number}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getPayloadLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setPayloadLength = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional neo.fs.v2.refs.Checksum payload_hash = 6;
 * @return {proto.neo.fs.v2.refs.Checksum}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getPayloadHash = function() {
  return /** @type{proto.neo.fs.v2.refs.Checksum} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Checksum, 6));
};


/** @param {proto.neo.fs.v2.refs.Checksum|undefined} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setPayloadHash = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.neo.fs.v2.object.ShortHeader.prototype.clearPayloadHash = function() {
  this.setPayloadHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.hasPayloadHash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional neo.fs.v2.refs.Checksum homomorphic_hash = 7;
 * @return {proto.neo.fs.v2.refs.Checksum}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.getHomomorphicHash = function() {
  return /** @type{proto.neo.fs.v2.refs.Checksum} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Checksum, 7));
};


/** @param {proto.neo.fs.v2.refs.Checksum|undefined} value  */
proto.neo.fs.v2.object.ShortHeader.prototype.setHomomorphicHash = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.neo.fs.v2.object.ShortHeader.prototype.clearHomomorphicHash = function() {
  this.setHomomorphicHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.ShortHeader.prototype.hasHomomorphicHash = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.object.Header.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.object.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.Header.displayName = 'proto.neo.fs.v2.object.Header';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.object.Header.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.Header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = msg.getVersion()) && refs_types_pb.Version.toObject(includeInstance, f),
    containerId: (f = msg.getContainerId()) && refs_types_pb.ContainerID.toObject(includeInstance, f),
    ownerId: (f = msg.getOwnerId()) && refs_types_pb.OwnerID.toObject(includeInstance, f),
    creationEpoch: msg.getCreationEpoch(),
    payloadLength: msg.getPayloadLength(),
    payloadHash: (f = msg.getPayloadHash()) && refs_types_pb.Checksum.toObject(includeInstance, f),
    objectType: msg.getObjectType(),
    homomorphicHash: (f = msg.getHomomorphicHash()) && refs_types_pb.Checksum.toObject(includeInstance, f),
    sessionToken: (f = msg.getSessionToken()) && session_types_pb.SessionToken.toObject(includeInstance, f),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.neo.fs.v2.object.Header.Attribute.toObject, includeInstance),
    split: (f = msg.getSplit()) && proto.neo.fs.v2.object.Header.Split.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.Header}
 */
proto.neo.fs.v2.object.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.Header;
  return proto.neo.fs.v2.object.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.Header}
 */
proto.neo.fs.v2.object.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.Version;
      reader.readMessage(value,refs_types_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 2:
      var value = new refs_types_pb.ContainerID;
      reader.readMessage(value,refs_types_pb.ContainerID.deserializeBinaryFromReader);
      msg.setContainerId(value);
      break;
    case 3:
      var value = new refs_types_pb.OwnerID;
      reader.readMessage(value,refs_types_pb.OwnerID.deserializeBinaryFromReader);
      msg.setOwnerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreationEpoch(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayloadLength(value);
      break;
    case 6:
      var value = new refs_types_pb.Checksum;
      reader.readMessage(value,refs_types_pb.Checksum.deserializeBinaryFromReader);
      msg.setPayloadHash(value);
      break;
    case 7:
      var value = /** @type {!proto.neo.fs.v2.object.ObjectType} */ (reader.readEnum());
      msg.setObjectType(value);
      break;
    case 8:
      var value = new refs_types_pb.Checksum;
      reader.readMessage(value,refs_types_pb.Checksum.deserializeBinaryFromReader);
      msg.setHomomorphicHash(value);
      break;
    case 9:
      var value = new session_types_pb.SessionToken;
      reader.readMessage(value,session_types_pb.SessionToken.deserializeBinaryFromReader);
      msg.setSessionToken(value);
      break;
    case 10:
      var value = new proto.neo.fs.v2.object.Header.Attribute;
      reader.readMessage(value,proto.neo.fs.v2.object.Header.Attribute.deserializeBinaryFromReader);
      msg.getAttributesList().push(value);
      msg.setAttributesList(msg.getAttributesList());
      break;
    case 11:
      var value = new proto.neo.fs.v2.object.Header.Split;
      reader.readMessage(value,proto.neo.fs.v2.object.Header.Split.deserializeBinaryFromReader);
      msg.setSplit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.Header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.Version.serializeBinaryToWriter
    );
  }
  f = this.getContainerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.ContainerID.serializeBinaryToWriter
    );
  }
  f = this.getOwnerId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.OwnerID.serializeBinaryToWriter
    );
  }
  f = this.getCreationEpoch();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getPayloadLength();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getPayloadHash();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      refs_types_pb.Checksum.serializeBinaryToWriter
    );
  }
  f = this.getObjectType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getHomomorphicHash();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      refs_types_pb.Checksum.serializeBinaryToWriter
    );
  }
  f = this.getSessionToken();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      session_types_pb.SessionToken.serializeBinaryToWriter
    );
  }
  f = this.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.neo.fs.v2.object.Header.Attribute.serializeBinaryToWriter
    );
  }
  f = this.getSplit();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.neo.fs.v2.object.Header.Split.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.Header} The clone.
 */
proto.neo.fs.v2.object.Header.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.Header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional neo.fs.v2.refs.Version version = 1;
 * @return {proto.neo.fs.v2.refs.Version}
 */
proto.neo.fs.v2.object.Header.prototype.getVersion = function() {
  return /** @type{proto.neo.fs.v2.refs.Version} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Version, 1));
};


/** @param {proto.neo.fs.v2.refs.Version|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setVersion = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.neo.fs.v2.object.Header.prototype.clearVersion = function() {
  this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.ContainerID container_id = 2;
 * @return {proto.neo.fs.v2.refs.ContainerID}
 */
proto.neo.fs.v2.object.Header.prototype.getContainerId = function() {
  return /** @type{proto.neo.fs.v2.refs.ContainerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ContainerID, 2));
};


/** @param {proto.neo.fs.v2.refs.ContainerID|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setContainerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.neo.fs.v2.object.Header.prototype.clearContainerId = function() {
  this.setContainerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasContainerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.refs.OwnerID owner_id = 3;
 * @return {proto.neo.fs.v2.refs.OwnerID}
 */
proto.neo.fs.v2.object.Header.prototype.getOwnerId = function() {
  return /** @type{proto.neo.fs.v2.refs.OwnerID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.OwnerID, 3));
};


/** @param {proto.neo.fs.v2.refs.OwnerID|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setOwnerId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.object.Header.prototype.clearOwnerId = function() {
  this.setOwnerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasOwnerId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 creation_epoch = 4;
 * @return {number}
 */
proto.neo.fs.v2.object.Header.prototype.getCreationEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.object.Header.prototype.setCreationEpoch = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 payload_length = 5;
 * @return {number}
 */
proto.neo.fs.v2.object.Header.prototype.getPayloadLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.neo.fs.v2.object.Header.prototype.setPayloadLength = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional neo.fs.v2.refs.Checksum payload_hash = 6;
 * @return {proto.neo.fs.v2.refs.Checksum}
 */
proto.neo.fs.v2.object.Header.prototype.getPayloadHash = function() {
  return /** @type{proto.neo.fs.v2.refs.Checksum} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Checksum, 6));
};


/** @param {proto.neo.fs.v2.refs.Checksum|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setPayloadHash = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.neo.fs.v2.object.Header.prototype.clearPayloadHash = function() {
  this.setPayloadHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasPayloadHash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ObjectType object_type = 7;
 * @return {!proto.neo.fs.v2.object.ObjectType}
 */
proto.neo.fs.v2.object.Header.prototype.getObjectType = function() {
  return /** @type {!proto.neo.fs.v2.object.ObjectType} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.neo.fs.v2.object.ObjectType} value  */
proto.neo.fs.v2.object.Header.prototype.setObjectType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional neo.fs.v2.refs.Checksum homomorphic_hash = 8;
 * @return {proto.neo.fs.v2.refs.Checksum}
 */
proto.neo.fs.v2.object.Header.prototype.getHomomorphicHash = function() {
  return /** @type{proto.neo.fs.v2.refs.Checksum} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Checksum, 8));
};


/** @param {proto.neo.fs.v2.refs.Checksum|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setHomomorphicHash = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.neo.fs.v2.object.Header.prototype.clearHomomorphicHash = function() {
  this.setHomomorphicHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasHomomorphicHash = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional neo.fs.v2.session.SessionToken session_token = 9;
 * @return {proto.neo.fs.v2.session.SessionToken}
 */
proto.neo.fs.v2.object.Header.prototype.getSessionToken = function() {
  return /** @type{proto.neo.fs.v2.session.SessionToken} */ (
    jspb.Message.getWrapperField(this, session_types_pb.SessionToken, 9));
};


/** @param {proto.neo.fs.v2.session.SessionToken|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setSessionToken = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.neo.fs.v2.object.Header.prototype.clearSessionToken = function() {
  this.setSessionToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasSessionToken = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated Attribute attributes = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.neo.fs.v2.object.Header.Attribute>}
 */
proto.neo.fs.v2.object.Header.prototype.getAttributesList = function() {
  return /** @type{!Array.<!proto.neo.fs.v2.object.Header.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.object.Header.Attribute, 10));
};


/** @param {Array.<!proto.neo.fs.v2.object.Header.Attribute>} value  */
proto.neo.fs.v2.object.Header.prototype.setAttributesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


proto.neo.fs.v2.object.Header.prototype.clearAttributesList = function() {
  this.setAttributesList([]);
};


/**
 * optional Split split = 11;
 * @return {proto.neo.fs.v2.object.Header.Split}
 */
proto.neo.fs.v2.object.Header.prototype.getSplit = function() {
  return /** @type{proto.neo.fs.v2.object.Header.Split} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.object.Header.Split, 11));
};


/** @param {proto.neo.fs.v2.object.Header.Split|undefined} value  */
proto.neo.fs.v2.object.Header.prototype.setSplit = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.neo.fs.v2.object.Header.prototype.clearSplit = function() {
  this.setSplit(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.prototype.hasSplit = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.Header.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.object.Header.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.Header.Attribute.displayName = 'proto.neo.fs.v2.object.Header.Attribute';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.Header.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.Header.Attribute} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.Header.Attribute}
 */
proto.neo.fs.v2.object.Header.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.Header.Attribute;
  return proto.neo.fs.v2.object.Header.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.Header.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.Header.Attribute}
 */
proto.neo.fs.v2.object.Header.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.Header.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.Attribute.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.Header.Attribute} The clone.
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.Header.Attribute} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.neo.fs.v2.object.Header.Attribute.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.neo.fs.v2.object.Header.Attribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.neo.fs.v2.object.Header.Attribute.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.Header.Split = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.object.Header.Split.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.object.Header.Split, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.Header.Split.displayName = 'proto.neo.fs.v2.object.Header.Split';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.object.Header.Split.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.Split.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.Header.Split.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.Header.Split} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.Header.Split.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: (f = msg.getParent()) && refs_types_pb.ObjectID.toObject(includeInstance, f),
    previous: (f = msg.getPrevious()) && refs_types_pb.ObjectID.toObject(includeInstance, f),
    parentSignature: (f = msg.getParentSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    parentHeader: (f = msg.getParentHeader()) && proto.neo.fs.v2.object.Header.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    refs_types_pb.ObjectID.toObject, includeInstance),
    splitId: msg.getSplitId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.Header.Split}
 */
proto.neo.fs.v2.object.Header.Split.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.Header.Split;
  return proto.neo.fs.v2.object.Header.Split.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.Header.Split} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.Header.Split}
 */
proto.neo.fs.v2.object.Header.Split.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.setPrevious(value);
      break;
    case 3:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setParentSignature(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.object.Header;
      reader.readMessage(value,proto.neo.fs.v2.object.Header.deserializeBinaryFromReader);
      msg.setParentHeader(value);
      break;
    case 5:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.getChildrenList().push(value);
      msg.setChildrenList(msg.getChildrenList());
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSplitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.Header.Split} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.Split.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Header.Split.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Header.Split.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getPrevious();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getParentSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = this.getParentHeader();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neo.fs.v2.object.Header.serializeBinaryToWriter
    );
  }
  f = this.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getSplitId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.Header.Split} The clone.
 */
proto.neo.fs.v2.object.Header.Split.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.Header.Split} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional neo.fs.v2.refs.ObjectID parent = 1;
 * @return {proto.neo.fs.v2.refs.ObjectID}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getParent = function() {
  return /** @type{proto.neo.fs.v2.refs.ObjectID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ObjectID, 1));
};


/** @param {proto.neo.fs.v2.refs.ObjectID|undefined} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.neo.fs.v2.object.Header.Split.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.Split.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.ObjectID previous = 2;
 * @return {proto.neo.fs.v2.refs.ObjectID}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getPrevious = function() {
  return /** @type{proto.neo.fs.v2.refs.ObjectID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ObjectID, 2));
};


/** @param {proto.neo.fs.v2.refs.ObjectID|undefined} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setPrevious = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.neo.fs.v2.object.Header.Split.prototype.clearPrevious = function() {
  this.setPrevious(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.Split.prototype.hasPrevious = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.refs.Signature parent_signature = 3;
 * @return {proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getParentSignature = function() {
  return /** @type{proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 3));
};


/** @param {proto.neo.fs.v2.refs.Signature|undefined} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setParentSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.object.Header.Split.prototype.clearParentSignature = function() {
  this.setParentSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.Split.prototype.hasParentSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Header parent_header = 4;
 * @return {proto.neo.fs.v2.object.Header}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getParentHeader = function() {
  return /** @type{proto.neo.fs.v2.object.Header} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.object.Header, 4));
};


/** @param {proto.neo.fs.v2.object.Header|undefined} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setParentHeader = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.neo.fs.v2.object.Header.Split.prototype.clearParentHeader = function() {
  this.setParentHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Header.Split.prototype.hasParentHeader = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated neo.fs.v2.refs.ObjectID children = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.neo.fs.v2.refs.ObjectID>}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getChildrenList = function() {
  return /** @type{!Array.<!proto.neo.fs.v2.refs.ObjectID>} */ (
    jspb.Message.getRepeatedWrapperField(this, refs_types_pb.ObjectID, 5));
};


/** @param {Array.<!proto.neo.fs.v2.refs.ObjectID>} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.neo.fs.v2.object.Header.Split.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * optional bytes split_id = 6;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getSplitId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes split_id = 6;
 * This is a type-conversion wrapper around `getSplitId()`
 * @return {string}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getSplitId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSplitId()));
};


/**
 * optional bytes split_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSplitId()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Header.Split.prototype.getSplitId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSplitId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.neo.fs.v2.object.Header.Split.prototype.setSplitId = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.object.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.Object.displayName = 'proto.neo.fs.v2.object.Object';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.Object} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectId: (f = msg.getObjectId()) && refs_types_pb.ObjectID.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && refs_types_pb.Signature.toObject(includeInstance, f),
    header: (f = msg.getHeader()) && proto.neo.fs.v2.object.Header.toObject(includeInstance, f),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.Object}
 */
proto.neo.fs.v2.object.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.Object;
  return proto.neo.fs.v2.object.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.Object}
 */
proto.neo.fs.v2.object.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.setObjectId(value);
      break;
    case 2:
      var value = new refs_types_pb.Signature;
      reader.readMessage(value,refs_types_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.object.Header;
      reader.readMessage(value,proto.neo.fs.v2.object.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.Object} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Object.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.Object.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getObjectId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.Signature.serializeBinaryToWriter
    );
  }
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.neo.fs.v2.object.Header.serializeBinaryToWriter
    );
  }
  f = this.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.Object} The clone.
 */
proto.neo.fs.v2.object.Object.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.Object} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional neo.fs.v2.refs.ObjectID object_id = 1;
 * @return {proto.neo.fs.v2.refs.ObjectID}
 */
proto.neo.fs.v2.object.Object.prototype.getObjectId = function() {
  return /** @type{proto.neo.fs.v2.refs.ObjectID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ObjectID, 1));
};


/** @param {proto.neo.fs.v2.refs.ObjectID|undefined} value  */
proto.neo.fs.v2.object.Object.prototype.setObjectId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.neo.fs.v2.object.Object.prototype.clearObjectId = function() {
  this.setObjectId(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Object.prototype.hasObjectId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional neo.fs.v2.refs.Signature signature = 2;
 * @return {proto.neo.fs.v2.refs.Signature}
 */
proto.neo.fs.v2.object.Object.prototype.getSignature = function() {
  return /** @type{proto.neo.fs.v2.refs.Signature} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.Signature, 2));
};


/** @param {proto.neo.fs.v2.refs.Signature|undefined} value  */
proto.neo.fs.v2.object.Object.prototype.setSignature = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.neo.fs.v2.object.Object.prototype.clearSignature = function() {
  this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Object.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Header header = 3;
 * @return {proto.neo.fs.v2.object.Header}
 */
proto.neo.fs.v2.object.Object.prototype.getHeader = function() {
  return /** @type{proto.neo.fs.v2.object.Header} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.object.Header, 3));
};


/** @param {proto.neo.fs.v2.object.Header|undefined} value  */
proto.neo.fs.v2.object.Object.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.object.Object.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.Object.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes payload = 4;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.object.Object.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes payload = 4;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.neo.fs.v2.object.Object.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.Object.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.neo.fs.v2.object.Object.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.object.SplitInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.object.SplitInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.neo.fs.v2.object.SplitInfo.displayName = 'proto.neo.fs.v2.object.SplitInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.object.SplitInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.object.SplitInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.neo.fs.v2.object.SplitInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    splitId: msg.getSplitId_asB64(),
    lastPart: (f = msg.getLastPart()) && refs_types_pb.ObjectID.toObject(includeInstance, f),
    link: (f = msg.getLink()) && refs_types_pb.ObjectID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.object.SplitInfo}
 */
proto.neo.fs.v2.object.SplitInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.object.SplitInfo;
  return proto.neo.fs.v2.object.SplitInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.object.SplitInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.object.SplitInfo}
 */
proto.neo.fs.v2.object.SplitInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSplitId(value);
      break;
    case 2:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.setLastPart(value);
      break;
    case 3:
      var value = new refs_types_pb.ObjectID;
      reader.readMessage(value,refs_types_pb.ObjectID.deserializeBinaryFromReader);
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.object.SplitInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.SplitInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.neo.fs.v2.object.SplitInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSplitId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getLastPart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
  f = this.getLink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      refs_types_pb.ObjectID.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.neo.fs.v2.object.SplitInfo} The clone.
 */
proto.neo.fs.v2.object.SplitInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.neo.fs.v2.object.SplitInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes split_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.getSplitId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes split_id = 1;
 * This is a type-conversion wrapper around `getSplitId()`
 * @return {string}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.getSplitId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSplitId()));
};


/**
 * optional bytes split_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSplitId()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.getSplitId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSplitId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.neo.fs.v2.object.SplitInfo.prototype.setSplitId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional neo.fs.v2.refs.ObjectID last_part = 2;
 * @return {proto.neo.fs.v2.refs.ObjectID}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.getLastPart = function() {
  return /** @type{proto.neo.fs.v2.refs.ObjectID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ObjectID, 2));
};


/** @param {proto.neo.fs.v2.refs.ObjectID|undefined} value  */
proto.neo.fs.v2.object.SplitInfo.prototype.setLastPart = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.neo.fs.v2.object.SplitInfo.prototype.clearLastPart = function() {
  this.setLastPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.hasLastPart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional neo.fs.v2.refs.ObjectID link = 3;
 * @return {proto.neo.fs.v2.refs.ObjectID}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.getLink = function() {
  return /** @type{proto.neo.fs.v2.refs.ObjectID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.ObjectID, 3));
};


/** @param {proto.neo.fs.v2.refs.ObjectID|undefined} value  */
proto.neo.fs.v2.object.SplitInfo.prototype.setLink = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.neo.fs.v2.object.SplitInfo.prototype.clearLink = function() {
  this.setLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.neo.fs.v2.object.SplitInfo.prototype.hasLink = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.object.ObjectType = {
  REGULAR: 0,
  TOMBSTONE: 1,
  STORAGE_GROUP: 2
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.object.MatchType = {
  MATCH_TYPE_UNSPECIFIED: 0,
  STRING_EQUAL: 1,
  STRING_NOT_EQUAL: 2,
  NOT_PRESENT: 3
};

goog.object.extend(exports, proto.neo.fs.v2.object);
